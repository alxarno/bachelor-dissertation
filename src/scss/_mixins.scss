@import './variables';

// ===================
// https://gist.github.com/jonathantneal/d0460e5c2d5d7f9bc5e6
// ===================

// =============================================================================
// String Replace
// =============================================================================

@function str-replace($string, $search, $replace: "") {
	$index: str-index($string, $search);

	@if $index {
		@return str-slice($string, 1, $index - 1)+$replace+str-replace(str-slice($string, $index + str-length($search)), $search, $replace);
	}

	@return $string;
}

// =============================================================================
// Font Face
// =============================================================================

@mixin font-face($name, $path, $weight: null, $style: null, $exts: eot woff2 woff ttf svg) {
	$src: null;

	$extmods: (eot: "?",
		svg: "#"+ str-replace($name, " ", "_"));

	$formats: (otf: "opentype",
		ttf: "truetype"
		);

	@each $ext in $exts {
		$extmod: if(map-has-key($extmods, $ext), $ext + map-get($extmods, $ext), $ext);
		$format: if(map-has-key($formats, $ext), map-get($formats, $ext), $ext);
		$src: append($src, url(quote($path + "." + $extmod)) format(quote($format)), comma);
	}

	@font-face {
		font-family: quote($name);
		font-style: $style;
		font-weight: $weight;
		src: $src;
	}
}

/* aniemation blink
------------------*/
@mixin blink {
	animation: blink2 .8s linear 2s infinite alternate;

	@keyframes blink2 {
		0% {
			filter: brightness(1);
		}

		3% {
			filter: brightness(0.8);
		}

		6% {
			filter: brightness(1);
		}

		9% {
			filter: brightness(1);
		}

		12% {
			filter: brightness(0.9);
		}

		15% {
			filter: brightness(1);
		}

		35% {
			filter: brightness(1);
		}

		41% {
			filter: brightness(0.95);
		}

		46% {
			filter: brightness(1);
		}

		54% {
			filter: brightness(1);
		}

		61% {
			filter: brightness(0.85);
		}

		68% {
			filter: brightness(0.95);
		}

		75% {
			filter: brightness(0.85);
		}

		90% {
			filter: brightness(1);
		}

		100% {
			filter: brightness(1);
		}
	}
}

@mixin adopt($key, $map: $--breakpoints-spec) {
  @if map-has-key($map, $key) {
    @media only screen and #{inspect(map-get($map, $key))} {
      @content;
    }
  } @else {
    @warn "Undefeined points: `#{$map}`";
  }
}